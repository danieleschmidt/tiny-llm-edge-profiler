# Pytest configuration for comprehensive testing
# Enhanced configuration for mutation testing, contract testing, and accessibility

[tool:pytest]
minversion = 7.0
addopts = 
    -ra
    --strict-markers
    --strict-config
    --cov=src/tiny_llm_profiler
    --cov-report=html:reports/coverage
    --cov-report=term-missing:skip-covered
    --cov-report=xml:reports/coverage.xml
    --cov-report=lcov:reports/lcov.info
    --cov-fail-under=80
    --cov-branch
    --junitxml=reports/junit.xml
    --tb=short
    --maxfail=10
    --durations=10
    --verbose

testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::FutureWarning:requests.*
    ignore::FutureWarning:urllib3.*

markers =
    unit: Unit tests that don't require external dependencies
    integration: Integration tests that may require external services
    hardware: Hardware-in-the-loop tests requiring physical devices
    performance: Performance and benchmark tests
    slow: Tests that take more than 5 seconds to run
    network: Tests that require network connectivity
    esp32: Tests requiring ESP32 hardware platform
    stm32: Tests requiring STM32 hardware platform
    riscv: Tests requiring RISC-V hardware platform
    rp2040: Tests requiring Raspberry Pi Pico hardware
    contract: Contract tests for API compatibility
    accessibility: Accessibility testing for web interfaces
    mutation: Mutation testing markers
    fuzz: Fuzz testing markers
    smoke: Smoke tests for quick validation
    regression: Regression tests for known issues
    memory: Memory usage and leak tests
    security: Security-focused tests
    compatibility: Cross-platform compatibility tests

timeout = 300
timeout_method = thread

# Pytest plugins configuration
asyncio_mode = auto

# Coverage configuration enhancements
[coverage:run]
source = src
branch = true
parallel = true
concurrency = thread,multiprocessing
omit = 
    */tests/*
    */firmware/*
    */examples/*
    */__main__.py
    */cli.py
    */conftest.py
    */setup.py
    */venv/*
    */.venv/*

[coverage:paths]
source = 
    src/
    */site-packages/

[coverage:report]
precision = 2
show_missing = true
skip_covered = false
skip_empty = true
sort = Cover
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
    TYPE_CHECKING
    @overload
    if typing.TYPE_CHECKING:

[coverage:html]
directory = reports/coverage
title = Tiny LLM Edge Profiler Coverage Report

[coverage:xml]
output = reports/coverage.xml