# Production Dockerfile for Tiny LLM Edge Profiler
FROM python:3.11-slim as builder

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    pkg-config \
    libffi-dev \
    libssl-dev \
    libusb-1.0-0-dev \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install Python dependencies
COPY requirements.txt requirements-prod.txt ./
RUN pip install --no-cache-dir --upgrade pip wheel setuptools
RUN pip install --no-cache-dir -r requirements.txt -r requirements-prod.txt

# Production stage
FROM python:3.11-slim as production

# Install minimal runtime dependencies
RUN apt-get update && apt-get install -y \
    libusb-1.0-0 \
    udev \
    && rm -rf /var/lib/apt/lists/* \
    && useradd --create-home --shell /bin/bash app

# Copy virtual environment
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy application code
COPY --chown=app:app . .

# Create necessary directories
RUN mkdir -p /app/logs /app/cache /app/results /app/models \
    && chown -R app:app /app

# Switch to non-root user
USER app

# Environment variables
ENV PYTHONPATH=/app
ENV TINY_LLM_ENV=production
ENV TINY_LLM_LOG_LEVEL=INFO
ENV TINY_LLM_CACHE_DIR=/app/cache
ENV TINY_LLM_RESULTS_DIR=/app/results

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD python3 -c "from src.tiny_llm_profiler.health import run_health_checks; exit(0 if run_health_checks() else 1)"

# Expose ports
EXPOSE 8080 8443

# Entry point
ENTRYPOINT ["python3", "-m", "src.tiny_llm_profiler.cli"]
CMD ["--help"]