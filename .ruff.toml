# Advanced Ruff configuration for cutting-edge Python linting
# Provides comprehensive code quality, security, and performance analysis

# Target Python version and basic settings
target-version = "py38"
line-length = 88
indent-width = 4

# Enhanced rule selection for advanced projects
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings  
    "F",     # Pyflakes
    "I",     # isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
    "S",     # flake8-bandit (security)
    "T20",   # flake8-print
    "PT",    # flake8-pytest-style
    "RET",   # flake8-return
    "SIM",   # flake8-simplify
    "ARG",   # flake8-unused-arguments
    "DTZ",   # flake8-datetimez
    "ERA",   # eradicate (commented code)
    "PD",    # pandas-vet
    "PGH",   # pygrep-hooks
    "PL",    # Pylint
    "TRY",   # tryceratops (exception handling)
    "FLY",   # flynt (f-string conversion)
    "PERF",  # Perflint (performance)
    "FURB",  # refurb (modernization)
    "LOG",   # flake8-logging
    "PIE",   # flake8-pie
    "COM",   # flake8-commas
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "G",     # flake8-logging-format
    "INP",   # flake8-no-pep420
    "AIR",   # Airflow
    "ASYNC", # flake8-async
    "A",     # flake8-builtins
    "BLE",   # flake8-blind-except
    "FBT",   # flake8-boolean-trap
    "C90",   # mccabe complexity
    "DJ",    # flake8-django
    "EM",    # flake8-errmsg
    "EXE",   # flake8-executable
    "FA",    # flake8-future-annotations
    "INT",   # flake8-gettext
    "NPY",   # NumPy-specific rules
    "PYI",   # flake8-pyi
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RUF",   # Ruff-specific rules
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "TCH",   # flake8-type-checking
    "TID",   # flake8-tidy-imports
    "YTT",   # flake8-2020
]

# Ignore specific rules that may conflict with project needs
ignore = [
    "E501",    # line too long (handled by black)
    "B008",    # do not perform function calls in argument defaults
    "C901",    # too complex (handled by complexity settings)
    "S101",    # assert statements (common in tests)
    "S104",    # hardcoded bind all interfaces (needed for development)
    "TRY003",  # avoid specifying long messages outside exception class
    "PLR0913", # too many arguments to function call
    "COM812",  # trailing comma missing (conflicts with black)
    "ISC001",  # single line implicit string concatenation (conflicts with black)
    "Q000",    # single quotes found but double quotes preferred
    "Q001",    # single quote multiline found but double quotes preferred
    "FBT001",  # boolean trap in function definition
    "FBT002",  # boolean default value in function definition
    "ARG002",  # unused method argument (common in abstract methods)
    "PT011",   # pytest raises too broad
    "SIM108",  # use ternary operator (sometimes less readable)
    "TRY301",  # raise within try (sometimes necessary)
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PD901",   # avoid using generic variable name `df` for DataFrames
]

# Directory exclusions
exclude = [
    ".git",
    ".mypy_cache",
    ".nox",
    ".tox", 
    ".venv",
    "venv",
    "_build",
    "buck-out",
    "build",
    "dist",
    "firmware",
    "docs/_build",
    "__pycache__",
    "*.egg-info",
]

# Per-file ignores for specific contexts
[per-file-ignores]
"__init__.py" = [
    "F401",  # imported but unused
    "F403",  # star import used
    "E402",  # module level import not at top
]
"tests/*" = [
    "S101",    # assert statements are fine in tests
    "ARG",     # unused arguments common in fixtures
    "FBT",     # boolean traps acceptable in tests
    "PLR2004", # magic value used in comparison
    "SLF001",  # private member accessed (testing internal APIs)
    "PT009",   # unittest assertion
    "PT027",   # unittest methods
]
"tests/conftest.py" = [
    "F401",  # fixtures imported but unused (used by pytest)
]
"scripts/*" = [
    "T20",   # print statements OK in scripts
    "S602",  # subprocess shell=True (needed for complex commands)
    "S603",  # subprocess call without shell=False
    "PLR0913", # many arguments OK in CLI scripts
]
"docs/*" = [
    "INP001", # implicit namespace package (docs don't need __init__.py)
]
"examples/*" = [
    "T20",     # print statements OK
    "S101",    # asserts OK
    "PLR0913", # many arguments OK in examples
    "INP001",  # no __init__.py needed
]

# Advanced configuration sections
[format]
# Use double quotes for strings
quote-style = "double"
# Use trailing commas
skip-magic-trailing-comma = false
# Indent with spaces
indent-style = "space"

[lint.pycodestyle]
max-line-length = 88
max-doc-length = 88

[lint.mccabe]
# Maximum cyclomatic complexity
max-complexity = 12

[lint.pydocstyle]
# Use Google docstring style
convention = "google"

[lint.pylint]
max-args = 8
max-locals = 20
max-branches = 15
max-statements = 60

[lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"

[lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[lint.isort]
force-single-line = false
known-first-party = ["tiny_llm_profiler"]
combine-as-imports = true
split-on-trailing-comma = true

[lint.flake8-tidy-imports]
ban-relative-imports = "all"

[lint.flake8-type-checking]
runtime-evaluated-base-classes = ["pydantic.BaseModel"]

# Performance-specific settings
[lint.perflint]
max-try-body-length = 10

# Security-specific settings
[lint.bandit]
check-typed-exception = true

# Advanced pattern matching and fixes
[lint.flake8-bugbear]
extend-immutable-calls = [
    "fastapi.Depends",
    "fastapi.Security",
    "typer.Option",
    "typer.Argument",
]