[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tiny-llm-edge-profiler"
version = "0.1.0"
description = "Comprehensive profiling toolkit for running 2-bit/4-bit quantized LLMs on microcontrollers and edge devices"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Terragon Labs", email = "dev@terragon.dev"}
]
maintainers = [
    {name = "Terragon Labs", email = "dev@terragon.dev"}
]
keywords = [
    "llm", "edge-computing", "microcontroller", "profiling", 
    "quantization", "embedded-systems", "tinyml", "esp32", "arm"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Hardware",
    "Topic :: Software Development :: Embedded Systems",
]
requires-python = ">=3.8"
dependencies = [
    "numpy>=1.21.0",
    "pyserial>=3.5",
    "asyncio-mqtt>=0.11.0",
    "pydantic>=2.0.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "plotly>=5.0.0",
    "pandas>=1.5.0",
    "psutil>=5.9.0",
    "aiofiles>=23.0.0",
    "httpx>=0.24.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-timeout>=2.1.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "ruff>=0.1.0",
    "coverage[toml]>=7.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-timeout>=2.1.0",
    "factory-boy>=3.2.0",
    "faker>=19.0.0",
]
hardware = [
    "pyftdi>=0.54.0",
    "adafruit-circuitpython-busdevice>=5.2.0",
    "adafruit-circuitpython-ina219>=3.4.0",
    "RPi.GPIO>=0.7.1; platform_machine=='armv7l'",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-mermaid2-plugin>=1.0.0",
    "mkdocstrings[python]>=0.23.0",
]
all = [
    "tiny-llm-edge-profiler[dev,test,hardware,docs]"
]

[project.urls]
Homepage = "https://github.com/terragon-labs/tiny-llm-edge-profiler"
Documentation = "https://docs.terragon.dev/tiny-llm-profiler"
Repository = "https://github.com/terragon-labs/tiny-llm-edge-profiler.git"
Changelog = "https://github.com/terragon-labs/tiny-llm-edge-profiler/blob/main/CHANGELOG.md"
"Bug Tracker" = "https://github.com/terragon-labs/tiny-llm-edge-profiler/issues"

[project.scripts]
tiny-profiler = "tiny_llm_profiler.cli:main"
edge-profiler = "tiny_llm_profiler.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"tiny_llm_profiler" = ["firmware/*.bin", "configs/*.yaml", "templates/*.j2"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.nox
  | \.tox
  | \.venv
  | venv
  | \.svn
  | _build
  | buck-out
  | build
  | dist
  | firmware
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".git",
    ".mypy_cache",
    ".nox",
    ".tox",
    ".venv",
    "venv",
    "_build",
    "buck-out",
    "build",
    "dist",
    "firmware",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "serial.*",
    "pyftdi.*",
    "adafruit_*",
    "RPi.*",
    "plotly.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src/tiny_llm_profiler",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "hardware: Hardware-in-the-loop tests (requires physical devices)",
    "slow: Slow tests",
    "esp32: Tests requiring ESP32 hardware",
    "stm32: Tests requiring STM32 hardware",
    "riscv: Tests requiring RISC-V hardware",
]
timeout = 300

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/firmware/*",
    "*/examples/*",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]