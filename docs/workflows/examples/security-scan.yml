# Comprehensive Security Scanning Workflow
# Copy this file to .github/workflows/security-scan.yml after repository setup

name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * 1'  # Weekly scan on Mondays at 2 AM

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  dependency-scanning:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety pip-audit

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true

      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json || true

      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-reports
          path: |
            safety-report.json
            pip-audit-report.json

  container-scanning:
    name: Container Image Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t tiny-llm-profiler:scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'tiny-llm-profiler:scan'
          format: 'sarif'
          output: 'trivy-container-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-container-results.sarif'

      - name: Run Grype vulnerability scanner
        uses: anchore/scan-action@v3
        id: grype-scan
        with:
          image: 'tiny-llm-profiler:scan'
          fail-build: false
          severity-cutoff: high

      - name: Upload Grype scan results
        uses: actions/upload-artifact@v4
        with:
          name: grype-scan-results
          path: ${{ steps.grype-scan.outputs.sarif }}

  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit semgrep

      - name: Run Bandit security linter
        run: |
          bandit -r src/ -f json -o bandit-report.json || true

      - name: Run Semgrep
        run: |
          semgrep --config=auto --json --output=semgrep-report.json src/ || true

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Upload static analysis reports
        uses: actions/upload-artifact@v4
        with:
          name: static-analysis-reports
          path: |
            bandit-report.json
            semgrep-report.json

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses licensecheck

      - name: Check licenses
        run: |
          pip-licenses --format=json --output-file=licenses.json
          licensecheck --zero

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json

  infrastructure-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,kubernetes,github_actions
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Run Hadolint for Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint-results.sarif

      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-results.sarif

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [secret-scanning, dependency-scanning, container-scanning, static-analysis, license-compliance, infrastructure-security]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate consolidated security report
        run: |
          cat > security-summary.md << 'EOF'
          # Security Scan Summary
          
          **Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          
          ## Scan Results
          
          ### Secret Scanning
          - Status: ${{ needs.secret-scanning.result }}
          
          ### Dependency Scanning
          - Status: ${{ needs.dependency-scanning.result }}
          
          ### Container Scanning
          - Status: ${{ needs.container-scanning.result }}
          
          ### Static Analysis
          - Status: ${{ needs.static-analysis.result }}
          
          ### License Compliance
          - Status: ${{ needs.license-compliance.result }}
          
          ### Infrastructure Security
          - Status: ${{ needs.infrastructure-security.result }}
          
          ## Next Steps
          
          1. Review all uploaded SARIF files in the Security tab
          2. Address any HIGH or CRITICAL vulnerabilities
          3. Update dependencies with known vulnerabilities
          4. Ensure all secrets are properly managed
          
          EOF

      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Security Scan Results\n\n${summary}`
            });