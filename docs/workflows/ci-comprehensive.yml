# Comprehensive CI/CD Workflow Template for tiny-llm-edge-profiler
# 
# This template provides a complete CI/CD pipeline adapted for the repository's
# MATURING maturity level, including testing, security, and deployment.
#
# SETUP REQUIRED: Copy this to .github/workflows/ci.yml and configure secrets

name: Comprehensive CI/CD

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  schedule:
    # Run security checks weekly on Mondays at 3 AM UTC
    - cron: '0 3 * * 1'

env:
  PYTHON_VERSION: '3.11'
  PYTEST_ARGS: '-v --cov=src/tiny_llm_profiler --cov-report=xml --cov-report=html'

# Permissions for enhanced security
permissions:
  contents: read
  security-events: write
  actions: read
  checks: write
  pull-requests: write

jobs:
  # ========================================================================
  # CONTINUOUS INTEGRATION JOBS
  # ========================================================================
  
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Run black formatting check
        run: black --check --diff src/ tests/
      
      - name: Run isort import sorting check
        run: isort --check-only --diff src/ tests/
      
      - name: Run flake8 linting
        run: flake8 src/ tests/
      
      - name: Run ruff linting
        run: ruff check src/ tests/
      
      - name: Run mypy type checking
        run: mypy src/tiny_llm_profiler/
      
      - name: Check documentation style
        run: pydocstyle src/tiny_llm_profiler/

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,sbom]"
      
      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json
          bandit -r src/ -f txt
        continue-on-error: true
      
      - name: Run Safety dependency scan
        run: |
          safety check --json --output safety-report.json
          safety check
        continue-on-error: true
      
      - name: Run pip-audit for vulnerabilities
        run: |
          pip-audit --format=json --output=pip-audit-report.json
          pip-audit
        continue-on-error: true
      
      - name: Generate SBOM
        run: |
          python scripts/generate_sbom.py --output-dir ./sbom --format json xml
      
      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sbom-reports
          path: sbom/
      
      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            pip-audit-report.json

  unit-tests:
    name: Unit Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"
      
      - name: Run unit tests
        run: |
          pytest tests/unit/ ${{ env.PYTEST_ARGS }} \
            --junitxml=junit/test-results-${{ matrix.python-version }}.xml
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            junit/test-results-*.xml
            htmlcov/
            coverage.xml

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"
      
      - name: Run integration tests
        run: |
          pytest tests/integration/ ${{ env.PYTEST_ARGS }} \
            --timeout=300 \
            --junitxml=junit/integration-test-results.xml
      
      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: |
            junit/integration-test-results.xml
            htmlcov/

  hardware-tests:
    name: Hardware-in-the-Loop Tests
    runs-on: self-hosted  # Requires hardware setup
    timeout-minutes: 60
    if: github.event_name != 'schedule'  # Skip on scheduled runs
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test,hardware]"
      
      - name: Check hardware availability
        run: |
          python -c "
          from tiny_llm_profiler import EdgeProfiler
          platforms = ['esp32', 'stm32f4', 'rp2040']
          available = []
          for platform in platforms:
              try:
                  profiler = EdgeProfiler(platform=platform)
                  devices = profiler.discover_devices()
                  if devices:
                      available.append(platform)
                      print(f'✓ {platform}: {len(devices)} devices')
              except Exception as e:
                  print(f'✗ {platform}: {e}')
          
          if not available:
              print('No hardware available, skipping tests')
              exit(78)  # Skip exit code
          else:
              print(f'Available platforms: {available}')
          "
      
      - name: Run hardware tests
        run: |
          pytest tests/hardware/ ${{ env.PYTEST_ARGS }} \
            --hardware \
            --timeout=600 \
            --junitxml=junit/hardware-test-results.xml
        continue-on-error: true  # Hardware tests may be flaky
      
      - name: Upload hardware test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: hardware-test-results
          path: |
            junit/hardware-test-results.xml
            htmlcov/

  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev,test]"
      
      - name: Run performance tests
        run: |
          pytest tests/performance/ \
            --benchmark-only \
            --benchmark-json=benchmark-results.json \
            --junitxml=junit/performance-test-results.xml
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            benchmark-results.json
            junit/performance-test-results.xml

  # ========================================================================
  # DOCKER BUILD AND SECURITY
  # ========================================================================
  
  docker-build:
    name: Docker Build & Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: tiny-llm-profiler:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'tiny-llm-profiler:test'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Test container functionality
        run: |
          docker run --rm tiny-llm-profiler:test tiny-profiler --version
          docker run --rm tiny-llm-profiler:test tiny-profiler devices --simulate

  # ========================================================================
  # BUILD AND PACKAGING
  # ========================================================================
  
  build-package:
    name: Build Python Package
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [code-quality, unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build package
        run: python -m build
      
      - name: Check package
        run: twine check dist/*
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package
          path: dist/

  # ========================================================================
  # DOCUMENTATION BUILD
  # ========================================================================
  
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for version info
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"
      
      - name: Build documentation
        run: mkdocs build --strict
      
      - name: Upload documentation
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: site/

  # ========================================================================
  # DEPLOYMENT JOBS (on main branch only)
  # ========================================================================
  
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [build-docs, unit-tests, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"
      
      - name: Deploy to GitHub Pages
        run: mkdocs gh-deploy --force

  # ========================================================================
  # FINAL STATUS CHECK
  # ========================================================================
  
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: 
      - code-quality
      - security-scan
      - unit-tests
      - integration-tests
      - build-package
      - build-docs
      - docker-build
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
            echo "❌ Code quality checks failed"
            exit 1
          fi
          
          if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
            echo "❌ Security scan failed"
            exit 1
          fi
          
          if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
            echo "❌ Unit tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "❌ Integration tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.build-package.result }}" != "success" ]]; then
            echo "❌ Package build failed"
            exit 1
          fi
          
          if [[ "${{ needs.build-docs.result }}" != "success" ]]; then
            echo "❌ Documentation build failed"
            exit 1
          fi
          
          if [[ "${{ needs.docker-build.result }}" != "success" ]]; then
            echo "❌ Docker build failed"
            exit 1
          fi
          
          echo "✅ All CI checks passed successfully!"

# ========================================================================
# ENVIRONMENT VARIABLES AND SECRETS REQUIRED
# ========================================================================
# 
# Repository Secrets (configure in GitHub repository settings):
# - CODECOV_TOKEN: For code coverage reporting
# - DOCKER_USERNAME: For Docker Hub publishing (if needed)
# - DOCKER_PASSWORD: For Docker Hub publishing (if needed)
# - PYPI_TOKEN: For PyPI publishing (if needed)
# 
# Repository Variables:
# - PYTHON_VERSION: Default Python version (currently set above)
# 
# Branch Protection Rules:
# - Require status checks: ci-success
# - Require up-to-date branches: true
# - Include administrators: false
# ========================================================================