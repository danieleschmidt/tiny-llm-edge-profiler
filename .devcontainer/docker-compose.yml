version: '3.8'

services:
  devcontainer:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        VARIANT: "3.11-bullseye"
    
    volumes:
      - ../..:/workspaces:cached
      - /var/run/docker.sock:/var/run/docker.sock
      - /dev:/dev:rw
    
    # Enable hardware device access
    privileged: true
    device_cgroup_rules:
      - 'c 188:* rmw'  # USB devices
    
    # Overrides default command so things don't shut down after the process ends
    command: sleep infinity
    
    # Environment variables
    environment:
      - PYTHONPATH=/workspaces/tiny-llm-edge-profiler/src
      - TINY_PROFILER_DEV_MODE=1
      - TINY_PROFILER_LOG_LEVEL=DEBUG
      - DOCKER_BUILDKIT=1
    
    # Network configuration
    network_mode: host
    
    # User configuration
    user: vscode
    
    # Working directory
    working_dir: /workspaces/tiny-llm-edge-profiler

  # Optional services for development
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    profiles:
      - monitoring

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    profiles:
      - services

  # Test database for integration tests
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_DB: tiny_profiler_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    profiles:
      - testing

volumes:
  prometheus_data:
  grafana_data:
  redis_data:
  postgres_data: